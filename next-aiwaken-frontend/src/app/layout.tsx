import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { QueryClientContextProvider } from "@/context/query-client-context";
import { AuthenticationProvider } from "@/context/auth-context";
import { getServerAuthSession } from "@/services/ssr/auth";
import { OnboardingStepper } from "@/components/on-boarding-stepper";
import { AuthLayout } from "@/components/auth-layout";
import React from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const data = await getServerAuthSession();

  if (data?.user.is_new_user) {
    return (
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <QueryClientContextProvider>
            <div className="w-full h-screen flex items-center justify-center bg-gradient-to-b from-gray-900 to-gray-950 shadow-sm backdrop-blur">
              <OnboardingStepper />
            </div>
          </QueryClientContextProvider>
        </body>
      </html>
    );
  }

  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QueryClientContextProvider>
          <AuthenticationProvider initialUser={data}>
            <AuthLayout>{children}</AuthLayout>
          </AuthenticationProvider>
        </QueryClientContextProvider>
      </body>
    </html>
  );
}
